package StanleysStorage;

import StanleysStorage.Unit.unitType;

public class Location {

	private String designation;
	private int row;
	private int col;
	private int customerCount;
	private Unit[][] unitArr;
	private Customer[] custArr;
	private String state;
	private String city;
	private int locationNumber;
	
	
	public Location(String designation) throws Exception {
		this.designation = designation;
		this.row = 12;
		this.col = 20;
		this.unitArr = new Unit[row][col];
		this.custArr = new Customer[100];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				unitArr[i][j] = new Unit(10, 10, 10, 10.0, unitType.STANDARD);
			}
		}
	}


	/*
	 * Getters and Setters
	 */
	public void setDesignation(String desig) throws IllegalArgumentException {
		if(desig.matches("^\\d{2}\\s?[A-Z]?[0-9]{2}[a-zA-Z]")){
			this.designation = desig;
			this.state = desig.substring(0, 2);
			this.locationNumber = Integer.parseInt((desig.substring(2, 6)));
			this.city = desig.substring(6, desig.length() - 1);
		} else {
			throw new IllegalArgumentException("Designation not properly formatted!");
		}
	}
	
	
	
	public String getDesignation() {
		return designation;
	}
	
	public String getCity() {
		return city;
	}
	
	public int getLocationNumber() {
		return locationNumber;
	}
	
	public String getState() {
		return state;
	}
	
	public Unit getUnit(int row, int col) {
		return unitArr[row][col];
	}

	/*
	 * methods
	 */
	
	
	public Unit[] getEmptyUnits() {
		int arrSize = 0;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if(unitArr[i][j].getCustomer() == null) {
					arrSize += 1;
				}
			}
		}
		Unit[] tempArr = new Unit[arrSize];
		int idx = 0;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if(unitArr[i][j].getCustomer() == null) {
					tempArr[idx] = unitArr[i][j];
					idx += 1;
				}
			}
		}
		return tempArr;
	}
	
	public Unit[] getEmptyUnits(Unit.unitType type) {
		int arrSize = 0;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if(unitArr[i][j].getCustomer() == null && unitArr[i][j].getUnitType().equals(type)) {
					arrSize += 1;
				}
			}
		}
		Unit[] tempArr = new Unit[arrSize];
		int idx = 0;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if(unitArr[i][j].getCustomer() == null && unitArr[i][j].getUnitType().equals(type)) {
					tempArr[idx] = unitArr[i][j];
					idx += 1;
				}
			}
		}
		return tempArr;
	}
	
	public void addCustomer(Customer cust) {
		for(int i = 0; i < custArr.length; i++) {
			if(custArr[i] == null) {
				custArr[i] = cust;
			}
		}
		customerCount += 1;
	}
	
	public Customer getCustomer(int idx) throws Exception{
		if(custArr[idx] != null) {
			return custArr[idx];
		} else {
			throw new Exception("Customer not found!");
		}
	}
	
	public int getCustomerCount() {
		return customerCount;
	}
	
	public String toString() {
		String retVal = "";
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				retVal += unitArr[i][j].toString() + "\n\n";
			}
			retVal += "\n";
		}
		return retVal;
	}
	
	
}
